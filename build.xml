<project name="CDK-GPL" default="dist-all" basedir=".">

        <property file="build.properties"/>

        <!-- compile options -->
        <property name="build.sysclasspath" value="ignore" />
        <property name="build.compiler" value="modern" />
        <property name="debug" value="on" />
        <property name="deprecation" value="on" />
        <property name="optimization" value="off" />

        <!-- patches to apply -->

        <!-- where to find some libraries -->
        <property name="pathtojoelib" value="jar/libio" />
        <property name="pathtojmol" value="jar/libio" />
        <property name="weka.jar" value="weka.jar" />

       <!-- directories -->
        <property name="build" value="build" />
        <property name="build.src" value="${build}/src" />
        <property name="sourcedist" value="sourcedist" />
        <property name="dist" value="dist" />
        <property name="doc" value="doc" />
        <property name="src" value="src" />
        <property name="lib" value="jar" />
        <property name="devellib" value="develjar" />
        <property name="src.tests" value="${src}/test/org/openscience/cdk/test" />
        <property name="reports.tests" value="reports" />
        <property name="appjars.dir" value="${dist}/appjars" />
        <property name="metainf" value="${src}/META-INF" />
 
        <!-- class to run for testing-->
        <property name="testclass" value="CDKTests" />
        <property name="runclass" value="applications.FileConvertor" />
        <property name="arg1" value="" />
        <property name="arg2" value="" />
        <property name="arg3" value="" />
        <property name="arg4" value="" />

         <property environment="env" />


    <!-- Inlcude the ant-contrib goodies -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${basedir}/develjar/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>



    <target id="info" name="info" depends="check">
            <!-- Gives information about the building process. -->
            <echo message="Platform:" />
            <echo message="             OS: ${os.name}" />
            <echo message="   Architecture: ${os.arch}" />
            <echo message="        Version: ${os.version}" />
            <echo message=" Mac OS/X found: ${isMacOsX}" />
            <echo message="" />
            <echo message="Java/Ant Environment:" />
            <echo message="   Java version: ${java.version}" />
            <echo message="    Java vendor: ${java.vendor}" />
            <echo message="       Java dir: ${java.home}" />
            <echo message="   Java ext dir: ${java.ext.dirs}" />
            <echo message="    Ant version: ${ant.version}" />
            <echo message="    ${ANT_HOME}: ${ant.home}" />
            <echo message="       hasAnt17: ${hasAnt17}" />
            <echo message="" />
            <echo message="CDK Environment:" />
            <echo message="CDK-GPL version: ${version}" />
            <echo message="      build.xml: $Id: build.xml 10219 2008-02-22 19:13:45Z egonw $" />
            <echo message="    JUnit found: ${junit.present}" />
            <echo message=" --- required libraries ---" />
            <echo message="  Vecmath found: ${vecmath.present}" />
            <echo message="    Log4j found: ${log4j.present}" />
            <echo message=" --- distributed (but optional) libraries ---" />
            <echo message="     Weka found: ${weka.present}" />
            <echo message=" --- optional libraries ---" />
            <echo message="" />
            <echo message="Compiling:" />
            <echo message="            for: ${build.compiler}" />
            <echo message="          debug: ${debug}" />
            <echo message="    deprecation: ${deprecation}" />
            <echo message="   optimization: ${optimization}" />
        </target>

        <target id="checkPlatforms" name="checkPlatforms">
            <condition property="isMacOsX">
                <and>
                    <os family="mac"/>
                    <os family="unix"/>
                </and>
            </condition>
        </target>

        <target id="check" name="check" depends="checkPlatforms">
            <!-- Check wether Doclets are compiled and output is generated -->
            <uptodate property="dotjavafiles.uptodate"
                      targetfile="${build}/core.javafiles">
              <srcfiles dir="${src}" includes="**/*.java" />
            </uptodate>

            <!-- Checks which parts of CDK can be build. -->

            <!-- test for optional jars -->
            <available property="weka.present"
                       file="${lib}/${weka.jar}"/>
            <available property="vecmath.present"
                       file="${lib}/vecmath1.2-1.14.jar"/>
            <available property="log4j.present"
                       file="${lib}/log4j.jar"/>
            <available property="jgrapht.present"
                       file="${lib}/jgrapht-0.6.0.jar"/>

            <!-- test for optional jars -->
            <available property="junit.present"
                       classname="junit.framework.TestCase"
                       classpath="${ant.home}/lib/junit.jar"/>

            <!-- test Ant version -->
            <condition property="hasAnt17">
              <or>
                <contains string="${ant.version}" substring="1.7"/>
                <contains string="${ant.version}" substring="1.8"/>
              </or>
            </condition>

            <!-- test Java version -->
            <condition property="isJava13">
                <contains string="${java.version}" substring="1.3"/>
            </condition>
            <condition property="isJava14">
                <contains string="${java.version}" substring="1.4"/>
            </condition>
            <condition property="isJava15">
                <contains string="${java.version}" substring="1.5"/>
            </condition>
            <condition property="isJava16">
                <contains string="${java.version}" substring="1.6."/>
            </condition>
            <condition property="isJava17">
                <contains string="${java.version}" substring="1.7."/>
            </condition>
            <condition property="isJava14+">
                <or>
                    <contains string="${java.version}" substring="1.4"/>
                    <contains string="${java.version}" substring="1.5"/>
                    <contains string="${java.version}" substring="1.6"/>
                    <contains string="${java.version}" substring="1.7"/> 
                </or>
            </condition>
            <condition property="isJava15+">
                <or>
                    <contains string="${java.version}" substring="1.5"/>
                    <contains string="${java.version}" substring="1.6"/>
                    <contains string="${java.version}" substring="1.7"/>
                </or>
            </condition>
            <condition property="isNotJava15+">
                <not>
                  <or>
                    <contains string="${java.version}" substring="1.5"/>
                    <contains string="${java.version}" substring="1.6"/>
                    <contains string="${java.version}" substring="1.7"/>
                  </or>
            	</not>
            </condition>
            <fail if="isNotJava15+" message="This CDK release requires Java5 or better."/>
            <fail unless="hasAnt17" message="This CDK release requires Ant 1.7 or better."/>
        </target>

        <target id="init" name="init" depends="check, setupBuildDir"/>

        <target id="setupBuildDir" name="setupBuildDir">
                <tstamp />
                <mkdir dir="${build}" />
                <mkdir dir="${sourcedist}" />
                <mkdir dir="${dist}" />
                <mkdir dir="${reports.tests}" />
        </target>

        <target id="clean" name="clean" description="Removes autogenerated files.">
                <delete>
                    <fileset dir="." includes="**/*~" />
                    <fileset dir="." includes="*.tar.gz" />
                    <fileset dir="." includes="*.zip" />
                    <fileset dir="." includes="*.rda" />
                    <fileset dir="${src}" includes="*.entitylist" />
                    <fileset dir="${src}/main/">
                        <include name="net/sf/cdk/tools/*.class" />
                    </fileset>
                </delete>

                <delete dir="${build}" />
                <delete dir="${sourcedist}" />
                <delete dir="${dist}" />
                <delete dir="${reports.tests}" />
        </target>

        <target name="runDoclet" id="runDoclet" depends="check">
            <echo>Not skipping doclet run...</echo>
            <mkdir dir="${build}" />
        	<javac includes="net/sf/cdk/tools/MakeJavafilesFiles.java"
        	    srcdir="${src}/main/" destdir="${build}" optimize="${optimization}"
        	    debug="${debug}" deprecation="${deprecation}"/>
        	<java classpath="${build}" classname="net.sf.cdk.tools.MakeJavafilesFiles">
                <arg value="${src}"/>
                <arg value="${src}/main"/>
                <arg value="${build}"/>
        	</java>
        	<java classpath="${build}" classname="net.sf.cdk.tools.MakeJavafilesFiles">
                <arg value="${src}"/>
                <arg value="${src}/test"/>
                <arg value="${build}"/>
        	</java>
        </target>

        <target id="compile-needed-test" name="compile-needed-test">
            <uptodate property="module-uptodate" targetfile="${dist}/jar/cdk-${module}.jar">
                <srcfiles dir="${src}/main/">
                    <includesfile name="${build}/${module}.javafiles"/>
                </srcfiles>
            </uptodate>
        </target>

        <target id="compile-init" name="compile-init"
                depends="init, check, runDoclet"/>

        <target id="compile-module" name="compile-module"
                depends="check, dist.init, compile-needed-test"
                unless="module-uptodate">

            <echo message="Compiling classes for CDK's ${module} module." />

            <!-- check for availability for meta info files -->
            <available file="${metainf}/${module}.datafiles" property="module.datafiles.present"/>
            <available file="${metainf}/${module}.extrafiles" property="module.extrafiles.present"/>
            <available file="${metainf}/${module}.buildfiles" property="module.buildfiles.present"/>
            <available file="${metainf}/${module}.cdkdepends" property="module.cdkdepends.present"/>
            <available file="${metainf}/${module}.libdepends" property="module.libdepends.present"/>
            <available file="${metainf}/${module}.devellibdepends" property="module.devellibdepends.present"/>
            <available file="${metainf}/${module}.autogenerated" property="module.autogenerated.present"/>

            <!-- be somewhat informative -->
            <echo message="Datafiles defined: ${module.datafiles.present}"/>
            <echo message="Extra files defined: ${module.extrafiles.present}"/>
            <echo message="CDK dependencies defined: ${module.cdkdepends.present}"/>
            <echo message="Library dependencies defined: ${module.libdepends.present}"/>
            <echo message="Developer Library dependencies defined: ${module.devellibdepends.present}"/>
            <echo message="Autogenerated files specified: ${module.autogenerated.present}"/>

            <!-- normally javac compiles not just the given files, but also missing
                 classes that are in the same src/ directory. By making a copy first,
                 we explicitely make it impossible to compile files that are not
                 marked for a specific module -->
            <delete dir="${build.src}"/>
            <mkdir dir="${build.src}"/>
            <copy todir="${build.src}">
                <fileset dir="${src}/main/">
                    <excludesfile name="${build}/java1.4+.javafiles" if="isJava13"/>
                    <!-- excludesfile name="${build}/java1.4.javafiles" unless="isJava14"/ -->
                    <!-- excludesfile name="${build}/java1.5.javafiles" unless="isJava15"/ -->
                    <excludesfile name="${build}/java1.5+.javafiles" if="isNotJava15"/>
                    <excludesfile name="${build}/ant1.6.javafiles" unless="hasAnt17"/>

                    <includesfile name="${build}/${module}.javafiles"/>
                    <includesfile name="${metainf}/${module}.autogenerated" if="module.autogenerated.present"/>
                </fileset>
            </copy>

            <!-- ok, now that we have a copy, compile this copy -->
            <javac srcdir="${build.src}" destdir="${build}" optimize="${optimization}"
                    debug="${debug}" deprecation="${deprecation}" target="1.5" source="1.5">
                <classpath>
                    <fileset dir="${lib}" >
                        <exclude name="**/*" unless="module.libdepends.present" />
                        <includesfile name="${metainf}/${module}.libdepends" if="module.libdepends.present" />
                    </fileset>
                    <fileset dir="${devellib}">
                        <exclude name="**/*" unless="module.devellibdepends.present" />
                        <includesfile name="${metainf}/${module}.devellibdepends" if="module.devellibdepends.present" />
                    </fileset>
                    <fileset dir="jar">
                        <exclude name="**/*" unless="module.cdkdepends.present" />
                        <includesfile name="${metainf}/${module}.cdkdepends" if="module.cdkdepends.present" />
                    </fileset>
                </classpath>

                <excludesfile name="${build}/java1.4+.javafiles" if="isJava13"/>
                <!-- excludesfile name="${build}/java1.4.javafiles" unless="isJava14"/ -->
                <!-- excludesfile name="${build}/java1.5.javafiles" unless="isJava15"/ -->
                <excludesfile name="${build}/java1.5+.javafiles" if="isNotJava15"/>
                <excludesfile name="${build}/ant1.6.javafiles" unless="hasAnt17"/>

                <includesfile name="${build}/${module}.javafiles"/>
                <includesfile name="${metainf}/${module}.autogenerated" if="module.autogenerated.present"/>
            </javac>

        	<!-- create a autogenerated.classes file, if applicable, so that these files can be included in the jar -->
            <if>
                <istrue value="${module.autogenerated.present}"/>
                <then>
                    <copy file="${metainf}/${module}.autogenerated" tofile="${build}/${module}.autogenerated.classes"
                          failonerror="false"/>
                    <replace dir="${build}" token=".java" value="*.class">
                        <include name="*.autogenerated.classes"/>
                    </replace>
                </then>
            </if>


            <!-- and then jar things up into the module jar -->
            <jar jarfile="${dist}/jar/cdk-${module}.jar">
                <fileset dir="${build}">
                    <includesfile name="${build}/${module}.classes" />
                    <includesfile name="${build}/${module}.autogenerated.classes" if="module.autogenerated.present"/>
                    <excludesfile name="${build}/java1.4+.classes" if="isJava13"/>
                    <!-- excludesfile name="${build}/java1.4.classes" unless="isJava14"/ -->
                    <!-- excludesfile name="${build}/java1.5.javafiles" unless="isJava15"/ -->
                    <excludesfile name="${build}/java1.5+.javafiles" if="isNotJava15"/>
                    <excludesfile name="${build}/ant1.6.classes" unless="hasAnt17"/>
               </fileset>
               <fileset dir="${build}">
                    <include name="${module}.javafiles" />
               </fileset>
               <fileset dir="${src}/main/">
                    <exclude name="**/*" unless="module.datafiles.present"/>
                    <includesfile name="${metainf}/${module}.datafiles" if="module.datafiles.present" />
               </fileset>
               <fileset dir="${src}/main/">
                    <exclude name="**/*" unless="module.extrafiles.present"/>
                    <includesfile name="${metainf}/${module}.extrafiles" if="module.extrafiles.present" />
               </fileset>
                <fileset dir="${build}">
                     <exclude name="**/*" unless="module.buildfiles.present"/>
                     <includesfile name="${metainf}/${module}.buildfiles" if="module.buildfiles.present" />
                </fileset>
            </jar>
       </target>

       <target id="dist.init" name="dist.init">
            <mkdir dir="${dist}/jar" />
        </target>

        <target id="dist-optional" name="dist-optional" depends="dist-all"
        	description="Compile CDK modules that require optional libraries">
        	<antcall target="dist-java3d"/>
        	<antcall target="dist-jmol"/>
      		<antcall target="dist-joelib"/>
        </target>

    <target id="dist-all" name="dist-all" description="dist-all">
            <antcall target="compile-init"/>
     	    <antcall target="compile-module"><param name="module" value="qsarweka"/><param name="source" value="${src}/main"/></antcall>
        </target>

	<target id="test-dist-all" name="test-dist-all" description="test-dist-all">
        <antcall target="compile-init"/>
        <antcall target="compile-module"><param name="module" value="test-qsarweka"/><param name="source" value="${src}/test"/></antcall>
	</target>

	<target id="dist-large" name="dist-large" depends="dist-all"
            description="Builds one big jar file for the CDK, including experimental classes and third-party libraries.">

            <!-- first unjar the CDK and other jars we need -->
            <mkdir dir="${appjars.dir}"/>
            <unjar dest="${appjars.dir}">
                <fileset dir="${lib}">
                    <includesfile name="${metainf}/qsarweka.libdepends"/>
                </fileset>
                <fileset dir="${dist}/jar">
                    <include name="cdk-qsarweka.jar"/>
                </fileset>
            </unjar>

            <!-- then zip up things -->
            <jar jarfile="${dist}/jar/cdk-${version}.jar">
                <manifest>
                    <attribute name="Main-Class" value="org.openscience.cdk.applications.DistLargeInfo"/>
                    <section name="org.openscience.cdk">
                        <attribute name="Specification-Title" value="The Chemistry Development Kit GPL extension"/>
                        <attribute name="Specification-Version" value="1.0"/>
                        <attribute name="Specification-Vendor" value="The CDK Project"/>
                        <attribute name="Implementation-Title" value="org.openscience.cdk"/>
                        <attribute name="Implementation-Version" value="${version}"/>
                        <attribute name="Implementation-Vendor" value="The CDK Project"/>
                    </section>
                </manifest>
                <fileset dir="${appjars.dir}">
                    <include name="**/*" />
                </fileset>
            </jar>
        </target>

        <target id="dist-pure" name="dist-pure" depends="dist-all"
            description="Builds one big jar file for the CDK, including experimental classes, but excluding third party libraries.">

            <!-- first unjar the CDK and other jars we need -->
            <mkdir dir="${appjars.dir}"/>
            <unjar dest="${appjars.dir}">
                <fileset dir="${dist}/jar">
                    <include name="cdk-qsarweka.jar"/>
                </fileset>
            </unjar>

            <!-- then zip up things -->
            <jar jarfile="${dist}/jar/cdkgpl-pure-${version}.jar">
                <manifest>
                    <attribute name="Main-Class" value="org.openscience.cdk.applications.DistLargeInfo"/>
                    <section name="org.openscience.cdk">
                        <attribute name="Specification-Title" value="The Chemistry Development Kit GPL extension"/>
                        <attribute name="Specification-Version" value="1.0"/>
                        <attribute name="Specification-Vendor" value="The CDK Project"/>
                        <attribute name="Implementation-Title" value="org.openscience.cdk"/>
                        <attribute name="Implementation-Version" value="${version}"/>
                        <attribute name="Implementation-Vendor" value="The CDK Project"/>
                    </section>
                </manifest>
                <fileset dir="${appjars.dir}">
                    <include name="**/*" />
                </fileset>
            </jar>
        </target>

        <target id="dist-test-large" name="dist-test-large" depends="test-dist-all"
            description="Builds on big jar file for the CDK test classes.">

            <!-- first unjar the CDK and other jars we need -->
            <mkdir dir="${appjars.dir}"/>
            <unjar dest="${appjars.dir}">
                <fileset dir="${lib}">
                    <includesfile name="${metainf}/test-qsarweka.libdepends"/>
                </fileset>
                <fileset dir="${dist}/jar">
                    <include name="cdk-test-qsarweka.jar"/>
                </fileset>
            </unjar>

            <!-- then zip up things -->
            <jar jarfile="${dist}/jar/cdk-test-${version}.jar">
                <manifest>
                    <attribute name="Main-Class" value="org.openscience.cdk.test.CDKTests"/>
                    <section name="org.openscience.cdk">
                        <attribute name="Specification-Title" value="The Chemistry Development Kit GPL Extension"/>
                        <attribute name="Specification-Version" value="1.0"/>
                        <attribute name="Specification-Vendor" value="The CDK Project"/>
                        <attribute name="Implementation-Title" value="org.openscience.cdk"/>
                        <attribute name="Implementation-Version" value="${version}"/>
                        <attribute name="Implementation-Vendor" value="The CDK Project"/>
                    </section>
                </manifest>
                <fileset dir="${appjars.dir}">
                    <include name="**/*" />
                </fileset>
            </jar>
        </target>

        <target id="sourcedist" name="sourcedist" depends="init, runDoclet"
                description="Builds the source packages.">
                <property name="package" value="cdkgpl-src+libs-${version}"/>
                <property name="sourcedist.dir" value="${sourcedist}/${package}"/>
                <delete dir="${sourcedist.dir}"/>
                <copy todir="${sourcedist.dir}/${${src}/main/org/}">
                        <fileset dir="${build}" includes="*.javafiles" />
                        <fileset dir="${build}" includes="*.classes" />
                        <fileset dir="${build}" includes="*.set" />
                        <fileset dir="${src}/main/" includes="**/*.java" />
                        <fileset dir="${src}/main/" includes="**/*.jj" />
                        <fileset dir="${src}/main/" includes="org/openscience/cdk/io/cml/data/**" />
                </copy>
                <copy todir="${sourcedist.dir}">
                        <fileset dir="." includes="build.props" />
                        <fileset dir="." includes="build.xml" />
                        <fileset dir="." includes="javadoc.xml" />
                        <fileset dir="." includes="README" />
                        <fileset dir="." includes="changelog*" />
                </copy>
                <copy todir="${sourcedist.dir}/jar">
                        <fileset dir="jar">
                            <exclude name="libio/*.jar"/>
                        </fileset>
                </copy>
            <copy todir="${sourcedist.dir}/develjar">
                    <fileset dir="develjar">
                        <exclude name="pmd-1.8.jar"/>
                        <exclude name="doccheck.jar"/>
                        <exclude name="dbdoclet*.*"/>
                    </fileset>
            </copy>
            <copy todir="${sourcedist.dir}/src/META-INF">
                    <fileset dir="src/META-INF" />
            </copy>
                <copy todir="${sourcedist.dir}/${src}/org/openscience/cdk/config/data/">
                        <fileset dir="${src}/main/org/openscience/cdk/config/data/"
                                 includes="*" />
                </copy>
                <copy
                  file="${src}/main/org/openscience/cdk/dict/data/chemical.xml"
                  tofile="${sourcedist.dir}/${src}/main/org/openscience/cdk/dict/data/chemical.xml" />
                <copy
                  file="${src}/main/org/openscience/cdk/dict/data/elements.xml"
                  tofile="${sourcedist.dir}/${src}/main/org/openscience/cdk/dict/data/elements.xml" />
                <mkdir dir="${sourcedist.dir}/${src}/main/org/openscience/cdk/qsar/model/data/"/>
                <copy todir="${sourcedist.dir}/${src}/main/org/openscience/cdk/qsar/model/data/">
                    <fileset dir="${src}/main/org/openscience/cdk/qsar/model/data/" includes="*.R"/>
                </copy>
                <mkdir dir="${sourcedist.dir}/${src}/main/org/openscience/cdk/modeling/forcefield/data/"/>
                <copy todir="${sourcedist.dir}/${src}/main/org/openscience/cdk/modeling/forcefield/data/">
                    <fileset dir="${src}/main/org/openscience/cdk/modeling/forcefield/data/" includes="*.prm"/>
                </copy>
            <mkdir dir="${sourcedist.dir}/${src}/main/org/openscience/cdk/modeling/builder3d/data/"/>
            <copy todir="${sourcedist.dir}/${src}/main/org/openscience/cdk/modeling/builder3d/data/">
                <fileset dir="${src}/main/org/openscience/cdk/modeling/builder3d/data/" includes="*.gz"/>
            </copy>
                <copy todir="${sourcedist.dir}/${src}/">
                    <fileset dir="${src}/main/" includes="*.manifest" />
                </copy>
                <mkdir dir="${sourcedist.dir}/doc/" />
                <copy todir="${sourcedist.dir}/doc/">
                    <fileset dir="doc/" includes="lgpl.license" />
                </copy>
                <mkdir dir="${sourcedist.dir}/doc/javadoc" />
                <!-- the below deteles are a workaround, because the above should not have copied
                     in the src/data and src/org/openscience/cdk/test dirs -->
                <delete dir="${sourcedist.dir}/src/data"/>

                <!-- now package things up -->
                <tar tarfile="${package}.tar" basedir="${sourcedist}/" includes="${package}/**" />
                <gzip zipfile="${package}.tar.gz" src="${package}.tar" />
                <delete file="${package}.tar" />
                <zip zipfile="${package}.zip" basedir="${sourcedist}/" includes="${package}/**" />
        </target>

        <target id="puredist" name="puredist" depends="init, runDoclet"
                description="Builds the source packages without third-party libaries.">
                <property name="package" value="cdk-${version}"/>
                <property name="sourcedist.dir" value="${sourcedist}/${package}"/>
                <delete dir="${sourcedist.dir}"/>
                <copy todir="${sourcedist.dir}/${src}">
                        <fileset dir="${build}" includes="*.javafiles" />
                        <fileset dir="${build}" includes="*.classes" />
                        <fileset dir="${build}" includes="*.set" />
                        <fileset dir="${src}/main/" includes="**/*.java" />
                        <fileset dir="${src}/main/" includes="**/*.jj" />
                        <fileset dir="${src}/main/" includes="org/openscience/cdk/io/cml/data/**" />
                </copy>
                <copy todir="${sourcedist.dir}">
                        <fileset dir="." includes="build.props" />
                        <fileset dir="." includes="build.xml" />
                        <fileset dir="." includes="javadoc.xml" />
                        <fileset dir="." includes="README" />
                        <fileset dir="." includes="changelog*" />
                </copy>
                <copy todir="${sourcedist.dir}/src/data">
                        <fileset dir="src/data" />
                </copy>
                <copy todir="${sourcedist.dir}/src/META-INF">
                    <fileset dir="src/META-INF" />
               </copy>
                <copy todir="${sourcedist.dir}/${src}/org/openscience/cdk/config/data/">
                        <fileset dir="${src}/main/org/openscience/cdk/config/data/"
                                 includes="*" />
                </copy>
                <copy
                  file="${src}/main/org/openscience/cdk/dict/data/chemical.xml"
                  tofile="${sourcedist.dir}/${src}/main/org/openscience/cdk/dict/data/chemical.xml" />
                <copy
                  file="${src}/org/openscience/cdk/dict/data/elements.xml"
                  tofile="${sourcedist.dir}/${src}/main/org/openscience/cdk/dict/data/elements.xml" />
                <mkdir dir="${sourcedist.dir}/${src}/org/openscience/cdk/qsar/model/data/"/>
                <copy todir="${sourcedist.dir}/${src}/main/org/openscience/cdk/qsar/model/data/">
                    <fileset dir="${src}/main/org/openscience/cdk/qsar/model/data/" includes="*.R"/>
                </copy>
                <mkdir dir="${sourcedist.dir}/${src}/main/org/openscience/cdk/modeling/forcefield/data/"/>
                <copy todir="${sourcedist.dir}/${src}/main/org/openscience/cdk/modeling/forcefield/data/">
                    <fileset dir="${src}/main/org/openscience/cdk/modeling/forcefield/data/" includes="*.prm"/>
                </copy>
            <mkdir dir="${sourcedist.dir}/${src}/main/org/openscience/cdk/modeling/builder3d/data/"/>
            <copy todir="${sourcedist.dir}/${src}/main/org/openscience/cdk/modeling/builder3d/data/">
                <fileset dir="${src}/main/org/openscience/cdk/modeling/builder3d/data/" includes="*.gz"/>
            </copy>
                <copy todir="${sourcedist.dir}/${src}/">
                    <fileset dir="${src}/main/" includes="*.manifest" />
                </copy>
                <mkdir dir="${sourcedist.dir}/doc/" />
                <copy todir="${sourcedist.dir}/doc/">
                    <fileset dir="doc/" includes="lgpl.license" />
                </copy>
                <mkdir dir="${sourcedist.dir}/doc/javadoc" />
                <!-- the below deteles are a workaround, because the above should not have copied
                     in the src/data and src/org/openscience/cdk/test dirs -->
                <delete dir="${sourcedist.dir}/src/data"/>
                <delete dir="${sourcedist.dir}/src/org/openscience/cdk/test"/>

                <!-- now package things up -->
                <tar tarfile="${package}.tar" basedir="${sourcedist}/" includes="${package}/**" />
                <gzip zipfile="${package}.tar.gz" src="${package}.tar" />
                <delete file="${package}.tar" />
        </target>

        <target id="noJunit" name="noJunit" depends="check" unless="junit.present">
            <fail message="JUnit is not installed in Ant. Please run ant with the option '-lib develjar/junit-4.3.1.jar'."/>
        </target>
        
		<target id="test-module" name="test-module" depends="noJunit"
	                description="Performs a full JUnit test for the CDK-GPL." 
	                if="junit.present">

            <echo message="Testing classes for CDK-GPL's ${module} module." />
            
            <!-- check for availability for meta info files -->
            <available file="${metainf}/test-${module}.cdkdepends" property="module.cdkdepends.present"/>
            <available file="${metainf}/test-${module}.libdepends" property="module.libdepends.present"/>
			<available file="${metainf}/test-${module}.devellibdepends" property="module.devellibdepends.present"/>        
			
            <!-- be somewhat informative -->
            <echo message="CDK dependencies defined: ${module.cdkdepends.present}"/>
            <echo message="Library dependencies defined: ${module.libdepends.present}"/>
			<echo message="Developer Library dependencies defined: ${module.devellibdepends.present}"/>

			<mkdir dir="${reports.tests}"/>
            <junit printsummary="yes" haltonfailure="no" fork="yes" maxmemory="256m">
                <classpath>
                     <fileset dir="${lib}" >
                         <exclude name="**/*" unless="module.libdepends.present" />
                         <includesfile name="${metainf}/test-${module}.libdepends" if="module.libdepends.present" />
                     </fileset>
                     <fileset dir="${devellib}">
                         <exclude name="**/*" unless="module.devellibdepends.present" />
                         <includesfile name="${metainf}/test-${module}.devellibdepends" if="module.devellibdepends.present" />
                     </fileset>
                     <fileset dir="${dist}/jar">
                         <exclude name="**/*" unless="module.cdkdepends.present" />
                         <includesfile name="${metainf}/test-${module}.cdkdepends" if="module.cdkdepends.present" />
                         <include name="cdk-test-${module}.jar" />
                     </fileset>
                 </classpath>
              	 <test name="org.openscience.cdk.test.modulesuites.M${module}Tests"
            	     haltonfailure="no"
            	     todir="${reports.tests}"
            	     outfile="result-${module}">
            	     <formatter type="brief" />
            	 </test>
			</junit>
	    </target>
			
        <target id="test-all" name="test-all" depends="noJunit, dist-all, test-dist-all"
                description="Performs a full JUnit test for the CDK." 
                if="junit.present">
                <antcall target="test-module"><param name="module" value="qsarweka"/></antcall>
        </target>

        <target id="limitations" name="limitations" depends="noJunit, dist-all"
                description="Performs a JUnit tests that indicate limitations of certain CDK algorithms/classes.">
                <junit printsummary="yes" haltonfailure="yes" fork="yes">
                    <classpath>
                        <fileset dir="${dist}/jar">
                                <include name="cdk-*.jar" />
                        </fileset>
                        <fileset dir="${lib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${devellib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}/libio">
                                <include name="*.jar" />
                        </fileset>
                    </classpath>
                        <test name="org.openscience.cdk.test.limitations.AlgorithmLimitations"
                        haltonfailure="no"
                        todir="${reports.tests}"
                        outfile="limitations">
                                <formatter type="brief" />
                        </test>
                </junit>
        </target>

        <target id="run-test" name="run-test" depends="dist-all,test-dist-all" 
                description="Runs one specific JUnit test suite (org.openscience.cdk.test.&lt;class>) as a standalone application with -Dtestclass=&lt;class>.">
                <echo message="Running test class: testclass=${testclass}"/>
                <java classname="org.openscience.cdk.test.${testclass}" fork="yes" maxmemory="512m">
                    <jvmarg value="-Dcdk.debugging=true"/>
                    <classpath>
                        <fileset dir="${dist}/jar/">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${devellib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}/libio">
                                <include name="*.jar" />
                        </fileset>
                    </classpath>
                </java>
        </target>

        <target id="junit-test" name="junit-test" depends="dist-all,test-dist-all,noJunit" 
                description="Runs one specific JUnit test suite (org.openscience.cdk.test.&lt;class>) with -Dtestclass=&lt;class>.">
                <echo message="JUnit tests class: testclass=${testclass}"/>
                <junit printsummary="yes" haltonfailure="no" fork="yes">
                    <jvmarg value="-Dcdk.debugging=true"/>
                    <jvmarg value="-Dcdk.debug.stdout=true"/>
                    <classpath>
                        <fileset dir="${dist}/jar/">
                                <include name="*.jar" />
                        </fileset>
                        <pathelement path="${java.class.path}" />
                        <pathelement location="." />
                        <fileset dir="${lib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${devellib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}/libio">
                                <include name="*.jar" />
                        </fileset>
                    </classpath>
                    <test name="org.openscience.cdk.test.${testclass}"
                        haltonfailure="no"
                        todir="${reports.tests}"
                        outfile="result.${testclass}">
                        <formatter type="brief" />
                    </test>
                </junit>
        </target>

        <target id="run" name="run" depends="dist-all" 
                description="Runs an application (org.openscience.cdk.&lt;class>) with -Drunclass=&lt;class>.">
                <java classname="org.openscience.cdk.${runclass}" fork="yes" >
                    <!--jvmarg value="-Dcdk.debugging=true"/>
                    <jvmarg value="-Dcdk.debug.stdout=true"/-->
 
		    <arg value="${arg1}" />
                   <arg value="${arg2}" />
                   <arg value="${arg3}" />
                   <arg value="${arg4}" />
                   <classpath>
                        <fileset dir="${dist}/jar">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}/libio">
                                <include name="*.jar" />
                        </fileset>
                    </classpath>
                </java>
        </target>

</project>
